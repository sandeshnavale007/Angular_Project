import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.HashMap;
import java.util.Map;

public class ActiveRecordPartitioner implements Partitioner {

    @Autowired
    private MyEntityRepository repository;

    private int gridSize;

    public ActiveRecordPartitioner(int gridSize) {
        this.gridSize = gridSize;
    }

    @Override
    public Map<String, ExecutionContext> partition(int gridSize) {
        long totalActive = repository.countActive();

        long chunkSize = totalActive / gridSize;
        long remainder = totalActive % gridSize;

        long offset = 0;
        Map<String, ExecutionContext> partitions = new HashMap<>();

        for (int i = 0; i < gridSize; i++) {
            long limit = chunkSize + (i < remainder ? 1 : 0);

            Long minId = repository.findMinIdByActiveWithOffsetLimit(offset, limit);
            Long maxId = repository.findMaxIdByActiveWithOffsetLimit(offset, limit);

            ExecutionContext context = new ExecutionContext();
            context.putLong("minId", minId != null ? minId : 0L);
            context.putLong("maxId", maxId != null ? maxId : 0L);

            partitions.put("partition" + i, context);

            offset += limit;
        }

        return partitions;
    }
}

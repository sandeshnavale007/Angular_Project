import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.HashMap;
import java.util.Map;

public class ActiveRecordPartitioner implements Partitioner {

    @Autowired
    private MyEntityRepository repository;

    private int gridSize;

    public ActiveRecordPartitioner(int gridSize) {
        this.gridSize = gridSize;
    }

    @Override
    public Map<String, ExecutionContext> partition(int gridSize) {
        long totalActive = repository.countActive();

        long chunkSize = totalActive / gridSize;
        long remainder = totalActive % gridSize;

        long offset = 0;
        Map<String, ExecutionContext> partitions = new HashMap<>();

        for (int i = 0; i < gridSize; i++) {
            long limit = chunkSize + (i < remainder ? 1 : 0);

            Long minId = repository.findMinIdByActiveWithOffsetLimit(offset, limit);
            Long maxId = repository.findMaxIdByActiveWithOffsetLimit(offset, limit);

            ExecutionContext context = new ExecutionContext();
            context.putLong("minId", minId != null ? minId : 0L);
            context.putLong("maxId", maxId != null ? maxId : 0L);

            partitions.put("partition" + i, context);

            offset += limit;
        }

        return partitions;
    }
}




public interface MyEntityRepository extends JpaRepository<MyEntity, Long> {

    @Query("SELECT COUNT(e) FROM MyEntity e WHERE e.active = true")
    long countActive();

    @Query(value = "SELECT MIN(id) FROM (SELECT id FROM my_entity WHERE active = true ORDER BY id LIMIT :limit OFFSET :offset) sub", nativeQuery = true)
    Long findMinIdByActiveWithOffsetLimit(@Param("offset") long offset, @Param("limit") long limit);

    @Query(value = "SELECT MAX(id) FROM (SELECT id FROM my_entity WHERE active = true ORDER BY id LIMIT :limit OFFSET :offset) sub", nativeQuery = true)
    Long findMaxIdByActiveWithOffsetLimit(@Param("offset") long offset, @Param("limit") long limit);
}













public interface MyEntityRepository extends JpaRepository<MyEntity, Long> {

    @Query("SELECT COUNT(e) FROM MyEntity e WHERE e.active = true")
    long countActive();

    @Query("SELECT e.id FROM MyEntity e WHERE e.active = true ORDER BY e.id")
    List<Long> findActiveIdsWithOffsetLimit(long offset, long limit);
}





@Component
@RequiredArgsConstructor
public class ActiveRecordPartitioner implements Partitioner {

    private final MyEntityRepository repo;

    @Override
    public Map<String, ExecutionContext> partition(int gridSize) {
        long totalActive = repo.countActive();
        long chunkSize = totalActive / gridSize;
        long remainder = totalActive % gridSize;

        Map<String, ExecutionContext> partitions = new HashMap<>();
        long offset = 0;

        for (int i = 0; i < gridSize; i++) {
            long limit = chunkSize + (i < remainder ? 1 : 0);
            List<Long> activeIds = repo.findActiveIdsWithOffsetLimit(offset, limit);

            if (!activeIds.isEmpty()) {
                Long minId = activeIds.get(0);
                Long maxId = activeIds.get(activeIds.size() - 1);

                ExecutionContext context = new ExecutionContext();
                context.putLong("minId", minId);
                context.putLong("maxId", maxId);
                partitions.put("partition" + i, context);
            }

            offset += limit;
        }

        return partitions;
    }
}



public class DbRangePartitioner implements Partitioner {

    private JdbcTemplate jdbcTemplate;
    private int gridSize;

    public DbRangePartitioner(JdbcTemplate jdbcTemplate, int gridSize) {
        this.jdbcTemplate = jdbcTemplate;
        this.gridSize = gridSize;
    }

    @Override
    public Map<String, ExecutionContext> partition(int gridSize) {
        Map<String, ExecutionContext> partitions = new HashMap<>();

        String sql = "WITH numbered_ids AS ( " +
                     "  SELECT id, NTILE(?) OVER (ORDER BY id) AS partition_num FROM your_table " +
                     ") " +
                     "SELECT partition_num, MIN(id) AS min_id, MAX(id) AS max_id " +
                     "FROM numbered_ids " +
                     "GROUP BY partition_num " +
                     "ORDER BY partition_num";

        List<Map<String, Object>> results = jdbcTemplate.queryForList(sql, gridSize);

        for (Map<String, Object> row : results) {
            ExecutionContext context = new ExecutionContext();
            context.putInt("minValue", (Integer)row.get("min_id"));
            context.putInt("maxValue", (Integer)row.get("max_id"));
            String partitionName = "partition" + row.get("partition_num");

            partitions.put(partitionName, context);
        }

        return partitions;
    }
}

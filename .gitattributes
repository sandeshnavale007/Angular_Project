<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logs Table</title>
    <!-- Bootstrap 4 CSS CDN -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f9;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .search-bar {
            margin-bottom: 20px;
            display: flex;
            justify-content: flex-end;
        }

        .search-bar input {
            padding: 10px;
            width: 250px;
            font-size: 16px;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }

        .pagination button {
            padding: 5px 10px;
            margin: 0 2px;
            cursor: pointer;
            border: 1px solid #ddd;
            background-color: #f9f9f9;
        }

        .pagination button:hover {
            background-color: #ddd;
        }

        /* Optional Styling for Search Bar */
        .search-bar input {
            width: 100%;
            max-width: 300px;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1 class="text-center">Log Table</h1>

        <!-- Search Bar -->
        <div class="search-bar">
            <input type="text" id="global-search" class="form-control" oninput="searchLogs()" placeholder="Search Logs..." />
        </div>

        <!-- Logs Table -->
        <div class="table-responsive">
            <table id="logs-table" class="table table-striped table-bordered" style="width: 100%; margin: 20px 0; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); border: 1px solid #ddd;">
                <thead>
                    <tr style="background-color: #007bff; color: white; position: sticky; top: 0; z-index: 1;">
                        <th style="padding: 12px 15px; text-align: left;">Timestamp</th>
                        <th style="padding: 12px 15px; text-align: left;">Log Level</th>
                        <th style="padding: 12px 15px; text-align: left;">Message</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Log rows will be added here dynamically -->
                </tbody>
            </table>
        </div>

        <!-- Pagination Controls -->
        <div class="pagination" id="pagination">
            <!-- Next and Previous buttons will be added here -->
        </div>
    </div>

    <!-- Bootstrap 4 JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        // Sample API endpoint, replace with your actual API endpoint
        const apiUrl = 'https://example.com/api/logs';

        let logs = [];
        let filteredLogs = [];
        let currentPage = 1;
        const logsPerPage = 5;

        // Fetch logs from the API
        async function fetchLogs() {
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) {
                    throw new Error('Failed to fetch logs');
                }

                logs = await response.json();
                filteredLogs = [...logs]; // Initially no filtering

                renderTable();
                renderPagination();
            } catch (error) {
                console.error('Error fetching logs:', error);
            }
        }

        // Render the table with the current logs
        function renderTable() {
            const tableBody = document.querySelector('#logs-table tbody');
            tableBody.innerHTML = '';

            const startIdx = (currentPage - 1) * logsPerPage;
            const endIdx = startIdx + logsPerPage;

            const logsToDisplay = filteredLogs.slice(startIdx, endIdx);

            logsToDisplay.forEach(log => {
                const row = document.createElement('tr');
                row.style = "background-color: #f2f2f2;";

                const timestampCell = document.createElement('td');
                timestampCell.textContent = log.timestamp;
                timestampCell.style = "padding: 12px 15px; text-align: left; border-bottom: 1px solid #ddd;";
                row.appendChild(timestampCell);

                const logLevelCell = document.createElement('td');
                logLevelCell.textContent = log.logLevel;
                logLevelCell.style = "padding: 12px 15px; text-align: left; border-bottom: 1px solid #ddd;";
                row.appendChild(logLevelCell);

                const messageCell = document.createElement('td');
                // Use innerHTML to render HTML tags like <br>
                messageCell.innerHTML = log.message.replace(/\n/g, '<br>');  // Handling line breaks
                messageCell.style = "padding: 12px 15px; text-align: left; border-bottom: 1px solid #ddd;";
                row.appendChild(messageCell);

                tableBody.appendChild(row);
            });
        }

        // Render pagination controls (with Next and Previous buttons)
        function renderPagination() {
            const paginationDiv = document.getElementById('pagination');
            paginationDiv.innerHTML = '';

            const totalPages = Math.ceil(filteredLogs.length / logsPerPage);

            // Show "Previous" button only if we're not on the first page
            if (currentPage > 1) {
                const prevButton = document.createElement('button');
                prevButton.textContent = 'Previous';
                prevButton.style = "padding: 5px 10px; margin: 0 2px; cursor: pointer; border: 1px solid #ddd; background-color: #f9f9f9;";
                prevButton.onclick = () => changePage(currentPage - 1);
                paginationDiv.appendChild(prevButton);
            }

            // Show "Next" button only if we're not on the last page
            if (currentPage < totalPages) {
                const nextButton = document.createElement('button');
                nextButton.textContent = 'Next';
                nextButton.style = "padding: 5px 10px; margin: 0 2px; cursor: pointer; border: 1px solid #ddd; background-color: #f9f9f9;";
                nextButton.onclick = () => changePage(currentPage + 1);
                paginationDiv.appendChild(nextButton);
            }
        }

        // Change the current page
        function changePage(pageNumber) {
            currentPage = pageNumber;
            renderTable();
            renderPagination();
        }

        // Search logs globally across all columns
        function searchLogs() {
            const searchTerm = document.getElementById('global-search').value.toLowerCase();

            filteredLogs = logs.filter(log => {
                return log.timestamp.toLowerCase().includes(searchTerm) ||
                       log.logLevel.toLowerCase().includes(searchTerm) ||
                       log.message.toLowerCase().includes(searchTerm);
            });

            currentPage = 1; // Reset to first page after searching
            renderTable();
            renderPagination();
        }

        // Call fetchLogs when the page loads
        window.onload = fetchLogs;
    </script>

</body>
</html>
